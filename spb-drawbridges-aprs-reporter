#!/usr/bin/env python3

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import argparse
import csv
import os
import re
from datetime import datetime

import aprslib
import pytz
import requests

from objectreport import ObjectReport


def fetch_schedule():
    response = requests.get(
        'https://en.mostotrest-spb.ru/rest-api/v1.1/schedule.json',
        params={'s': ''},
        headers={'user-agent': 'Mozilla/5.0 (Linux; Android 10; Build/RPP4.200409.015; wv) AppleWebKit/537.36 (KHTML, '
                               'like Gecko) Version/4.0 Chrome/83.0.4099.5 Mobile Safari/537.36'},
    )
    response.raise_for_status()

    bridges_schedule = []
    for row in response.json()['result']['rows']:
        bridge = row['bridge']
        schedule = row['schedule']

        if schedule['completion']:
            continue

        intervals = [(ts_to_time(schedule['time_from']), ts_to_time(schedule['time_to']))]
        if schedule['second_time']:
            intervals.append((ts_to_time(schedule['second_time_from']), ts_to_time(schedule['second_time_to'])))

        bridges_schedule.append({
            'bridge_name': bridge['caption'],
            'intervals': intervals,
            'open': bridge['open'],
            'coordinates': {
                'latitude': float(bridge['latitude']),
                'longitude': float(bridge['longitude']),
            }
        })

    return bridges_schedule


def ts_to_time(timestamp):
    date = datetime.fromtimestamp(timestamp, tz=pytz.UTC).astimezone(pytz.timezone('Europe/Moscow'))
    return date.strftime('%H:%M')


def create_bridge_beacons(bridges, callsign):
    beacons = []
    for bridge in bridges:
        object_name = re.sub(r'\s?Bridge\s?', '', bridge['bridge_name'], flags=re.I)
        comment = 'Open ' if bridge['open'] else 'Scheduled '
        comment += ' and '.join([f'from {frm} till {to}' for (frm, to) in bridge['intervals']])
        comment += ' mostotrest-spb.ru'

        beacon = ObjectReport({
            'fromcall': callsign,
            'tocall': 'APRS',
            'path': ['TCPIP*'],
            'symbol_table': '/',
            'symbol': 'Y',
            'object_name': object_name,
            'latitude': bridge['coordinates']['latitude'],
            'longitude': bridge['coordinates']['longitude'],
            'comment': comment,
        })
        beacons.append(beacon)

    return beacons


def report_beacons_to_aprs(beacons, callsign, server, port, password):
    if len(beacons) == 0:
        print('No APRS beacons to report. Is it drawbridges season?')
        return

    aprs = aprslib.IS(
        callsign,
        passwd=password,
        host=server,
        port=port,
    )
    aprs.connect(blocking=True)

    for beacon in beacons:
        aprs.sendall(beacon)

    aprs.close()


if __name__ == '__main__':
    args_parser = argparse.ArgumentParser(description='SPb Drawbridges APRS Reporter')
    args_parser.add_argument('--callsign', help='callsign', required=True)
    aprsis = args_parser.add_argument_group('aprsis', 'APRS-IS settings')
    aprsis.add_argument('--aprsis-server', required=True)
    aprsis.add_argument('--aprsis-port', type=int, default=14580)
    aprsis.add_argument('--aprsis-password', default=os.environ.get('APRSIS_PASSWORD'))
    args = args_parser.parse_args()

    schedule = fetch_schedule()
    bridge_beacons = create_bridge_beacons(schedule, args.callsign)
    report_beacons_to_aprs(bridge_beacons, args.callsign, args.aprsis_server, args.aprsis_port, args.aprsis_password)
